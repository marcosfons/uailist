schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "buy_list"
"""
type buy_list {
  created_at: timestamptz!
  name: String!

  """An array relationship"""
  product_buy_lists(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): [product_buy_list!]!

  """An aggregate relationship"""
  product_buy_lists_aggregate(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): product_buy_list_aggregate!
  updated_at: timestamptz!

  """An object relationship"""
  user: users!
  user_uuid: uuid!
  uuid: uuid!
}

"""
aggregated selection of "buy_list"
"""
type buy_list_aggregate {
  aggregate: buy_list_aggregate_fields
  nodes: [buy_list!]!
}

"""
aggregate fields of "buy_list"
"""
type buy_list_aggregate_fields {
  count(columns: [buy_list_select_column!], distinct: Boolean): Int!
  max: buy_list_max_fields
  min: buy_list_min_fields
}

"""
Boolean expression to filter rows from the table "buy_list". All fields are combined with a logical 'AND'.
"""
input buy_list_bool_exp {
  _and: [buy_list_bool_exp!]
  _not: buy_list_bool_exp
  _or: [buy_list_bool_exp!]
  created_at: timestamptz_comparison_exp
  name: String_comparison_exp
  product_buy_lists: product_buy_list_bool_exp
  product_buy_lists_aggregate: product_buy_list_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  user: users_bool_exp
  user_uuid: uuid_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "buy_list"
"""
enum buy_list_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  buy_list_pkey
}

"""
input type for inserting data into table "buy_list"
"""
input buy_list_insert_input {
  created_at: timestamptz
  name: String
  product_buy_lists: product_buy_list_arr_rel_insert_input
  updated_at: timestamptz
  uuid: uuid
}

"""aggregate max on columns"""
type buy_list_max_fields {
  created_at: timestamptz
  name: String
  updated_at: timestamptz
  user_uuid: uuid
  uuid: uuid
}

"""aggregate min on columns"""
type buy_list_min_fields {
  created_at: timestamptz
  name: String
  updated_at: timestamptz
  user_uuid: uuid
  uuid: uuid
}

"""
response of any mutation on the table "buy_list"
"""
type buy_list_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [buy_list!]!
}

"""
input type for inserting object relation for remote table "buy_list"
"""
input buy_list_obj_rel_insert_input {
  data: buy_list_insert_input!

  """upsert condition"""
  on_conflict: buy_list_on_conflict
}

"""
on_conflict condition type for table "buy_list"
"""
input buy_list_on_conflict {
  constraint: buy_list_constraint!
  update_columns: [buy_list_update_column!]! = []
  where: buy_list_bool_exp
}

"""Ordering options when selecting data from "buy_list"."""
input buy_list_order_by {
  created_at: order_by
  name: order_by
  product_buy_lists_aggregate: product_buy_list_aggregate_order_by
  updated_at: order_by
  user: users_order_by
  user_uuid: order_by
  uuid: order_by
}

"""primary key columns input for table: buy_list"""
input buy_list_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "buy_list"
"""
enum buy_list_select_column {
  """column name"""
  created_at

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  user_uuid

  """column name"""
  uuid
}

"""
input type for updating data in table "buy_list"
"""
input buy_list_set_input {
  created_at: timestamptz
  name: String
  updated_at: timestamptz
  uuid: uuid
}

"""
Streaming cursor of the table "buy_list"
"""
input buy_list_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: buy_list_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input buy_list_stream_cursor_value_input {
  created_at: timestamptz
  name: String
  updated_at: timestamptz
  user_uuid: uuid
  uuid: uuid
}

"""
update columns of table "buy_list"
"""
enum buy_list_update_column {
  """column name"""
  created_at

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  uuid
}

input buy_list_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: buy_list_set_input
  where: buy_list_bool_exp!
}

scalar citext

"""
Boolean expression to compare columns of type "citext". All fields are combined with logical 'AND'.
"""
input citext_comparison_exp {
  _eq: citext
  _gt: citext
  _gte: citext

  """does the column match the given case-insensitive pattern"""
  _ilike: citext
  _in: [citext!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: citext
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: citext
  _lt: citext
  _lte: citext
  _neq: citext

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: citext
  _nin: [citext!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: citext

  """does the column NOT match the given pattern"""
  _nlike: citext

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: citext

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: citext

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: citext

  """does the column match the given SQL regular expression"""
  _similar: citext
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "storage.files"
"""
type files {
  id: uuid!
  name: String
}

"""
Boolean expression to filter rows from the table "storage.files". All fields are combined with a logical 'AND'.
"""
input files_bool_exp {
  _and: [files_bool_exp!]
  _not: files_bool_exp
  _or: [files_bool_exp!]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "storage.files"
"""
enum files_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  files_pkey
}

"""
input type for inserting data into table "storage.files"
"""
input files_insert_input {
  id: uuid
}

"""
response of any mutation on the table "storage.files"
"""
type files_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [files!]!
}

"""
on_conflict condition type for table "storage.files"
"""
input files_on_conflict {
  constraint: files_constraint!
  update_columns: [files_update_column!]! = []
  where: files_bool_exp
}

"""Ordering options when selecting data from "storage.files"."""
input files_order_by {
  id: order_by
  name: order_by
}

"""
select columns of table "storage.files"
"""
enum files_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
Streaming cursor of the table "files"
"""
input files_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: files_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input files_stream_cursor_value_input {
  id: uuid
  name: String
}

"""
placeholder for update columns of table "storage.files" (current role has no relevant permissions)
"""
enum files_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

scalar float8

"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "auth.users"
  """
  deleteUser(id: uuid!): users

  """
  delete data from the table: "auth.users"
  """
  deleteUsers(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete data from the table: "buy_list"
  """
  delete_buy_list(
    """filter the rows which have to be deleted"""
    where: buy_list_bool_exp!
  ): buy_list_mutation_response

  """
  delete single row from the table: "buy_list"
  """
  delete_buy_list_by_pk(uuid: uuid!): buy_list

  """
  delete data from the table: "product_buy_list"
  """
  delete_product_buy_list(
    """filter the rows which have to be deleted"""
    where: product_buy_list_bool_exp!
  ): product_buy_list_mutation_response

  """
  delete single row from the table: "product_buy_list"
  """
  delete_product_buy_list_by_pk(uuid: uuid!): product_buy_list

  """
  insert a single row into the table: "storage.files"
  """
  insertFile(
    """the row to be inserted"""
    object: files_insert_input!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files

  """
  insert data into the table: "storage.files"
  """
  insertFiles(
    """the rows to be inserted"""
    objects: [files_insert_input!]!

    """upsert condition"""
    on_conflict: files_on_conflict
  ): files_mutation_response

  """
  insert data into the table: "buy_list"
  """
  insert_buy_list(
    """the rows to be inserted"""
    objects: [buy_list_insert_input!]!

    """upsert condition"""
    on_conflict: buy_list_on_conflict
  ): buy_list_mutation_response

  """
  insert a single row into the table: "buy_list"
  """
  insert_buy_list_one(
    """the row to be inserted"""
    object: buy_list_insert_input!

    """upsert condition"""
    on_conflict: buy_list_on_conflict
  ): buy_list

  """
  insert data into the table: "product"
  """
  insert_product(
    """the rows to be inserted"""
    objects: [product_insert_input!]!

    """upsert condition"""
    on_conflict: product_on_conflict
  ): product_mutation_response

  """
  insert data into the table: "product_buy_list"
  """
  insert_product_buy_list(
    """the rows to be inserted"""
    objects: [product_buy_list_insert_input!]!

    """upsert condition"""
    on_conflict: product_buy_list_on_conflict
  ): product_buy_list_mutation_response

  """
  insert a single row into the table: "product_buy_list"
  """
  insert_product_buy_list_one(
    """the row to be inserted"""
    object: product_buy_list_insert_input!

    """upsert condition"""
    on_conflict: product_buy_list_on_conflict
  ): product_buy_list

  """
  insert a single row into the table: "product"
  """
  insert_product_one(
    """the row to be inserted"""
    object: product_insert_input!

    """upsert condition"""
    on_conflict: product_on_conflict
  ): product

  """
  insert data into the table: "supermarket"
  """
  insert_supermarket(
    """the rows to be inserted"""
    objects: [supermarket_insert_input!]!

    """upsert condition"""
    on_conflict: supermarket_on_conflict
  ): supermarket_mutation_response

  """
  insert a single row into the table: "supermarket"
  """
  insert_supermarket_one(
    """the row to be inserted"""
    object: supermarket_insert_input!

    """upsert condition"""
    on_conflict: supermarket_on_conflict
  ): supermarket

  """
  update single row of the table: "auth.users"
  """
  updateUser(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update data of the table: "auth.users"
  """
  updateUsers(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update data of the table: "buy_list"
  """
  update_buy_list(
    """sets the columns of the filtered rows to the given values"""
    _set: buy_list_set_input

    """filter the rows which have to be updated"""
    where: buy_list_bool_exp!
  ): buy_list_mutation_response

  """
  update single row of the table: "buy_list"
  """
  update_buy_list_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: buy_list_set_input
    pk_columns: buy_list_pk_columns_input!
  ): buy_list

  """
  update multiples rows of table: "buy_list"
  """
  update_buy_list_many(
    """updates to execute, in order"""
    updates: [buy_list_updates!]!
  ): [buy_list_mutation_response]

  """
  update data of the table: "product"
  """
  update_product(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input

    """filter the rows which have to be updated"""
    where: product_bool_exp!
  ): product_mutation_response

  """
  update data of the table: "product_buy_list"
  """
  update_product_buy_list(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_buy_list_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_buy_list_set_input

    """filter the rows which have to be updated"""
    where: product_buy_list_bool_exp!
  ): product_buy_list_mutation_response

  """
  update single row of the table: "product_buy_list"
  """
  update_product_buy_list_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_buy_list_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_buy_list_set_input
    pk_columns: product_buy_list_pk_columns_input!
  ): product_buy_list

  """
  update multiples rows of table: "product_buy_list"
  """
  update_product_buy_list_many(
    """updates to execute, in order"""
    updates: [product_buy_list_updates!]!
  ): [product_buy_list_mutation_response]

  """
  update single row of the table: "product"
  """
  update_product_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_set_input
    pk_columns: product_pk_columns_input!
  ): product

  """
  update multiples rows of table: "product"
  """
  update_product_many(
    """updates to execute, in order"""
    updates: [product_updates!]!
  ): [product_mutation_response]

  """
  update data of the table: "supermarket"
  """
  update_supermarket(
    """increments the numeric columns with given value of the filtered values"""
    _inc: supermarket_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: supermarket_set_input

    """filter the rows which have to be updated"""
    where: supermarket_bool_exp!
  ): supermarket_mutation_response

  """
  update single row of the table: "supermarket"
  """
  update_supermarket_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: supermarket_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: supermarket_set_input
    pk_columns: supermarket_pk_columns_input!
  ): supermarket

  """
  update multiples rows of table: "supermarket"
  """
  update_supermarket_many(
    """updates to execute, in order"""
    updates: [supermarket_updates!]!
  ): [supermarket_mutation_response]

  """
  update multiples rows of table: "auth.users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "product"
"""
type product {
  brand: String
  created_at: timestamptz!
  created_by_user_uuid: uuid
  image_url: String!
  name: String!

  """An array relationship"""
  product_buy_lists(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): [product_buy_list!]!

  """An aggregate relationship"""
  product_buy_lists_aggregate(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): product_buy_list_aggregate!
  updated_at: timestamptz!
  uuid: uuid!
  weight: float8
}

"""
Boolean expression to filter rows from the table "product". All fields are combined with a logical 'AND'.
"""
input product_bool_exp {
  _and: [product_bool_exp!]
  _not: product_bool_exp
  _or: [product_bool_exp!]
  brand: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by_user_uuid: uuid_comparison_exp
  image_url: String_comparison_exp
  name: String_comparison_exp
  product_buy_lists: product_buy_list_bool_exp
  product_buy_lists_aggregate: product_buy_list_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
  weight: float8_comparison_exp
}

"""
columns and relationships of "product_buy_list"
"""
type product_buy_list {
  bought: Boolean!

  """An object relationship"""
  buy_list: buy_list!
  buy_list_uuid: uuid!
  created_at: timestamptz!
  price_uuid: uuid

  """An object relationship"""
  product: product!
  product_uuid: uuid!
  quantity: Int!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
aggregated selection of "product_buy_list"
"""
type product_buy_list_aggregate {
  aggregate: product_buy_list_aggregate_fields
  nodes: [product_buy_list!]!
}

input product_buy_list_aggregate_bool_exp {
  bool_and: product_buy_list_aggregate_bool_exp_bool_and
  bool_or: product_buy_list_aggregate_bool_exp_bool_or
  count: product_buy_list_aggregate_bool_exp_count
}

input product_buy_list_aggregate_bool_exp_bool_and {
  arguments: product_buy_list_select_column_product_buy_list_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: product_buy_list_bool_exp
  predicate: Boolean_comparison_exp!
}

input product_buy_list_aggregate_bool_exp_bool_or {
  arguments: product_buy_list_select_column_product_buy_list_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: product_buy_list_bool_exp
  predicate: Boolean_comparison_exp!
}

input product_buy_list_aggregate_bool_exp_count {
  arguments: [product_buy_list_select_column!]
  distinct: Boolean
  filter: product_buy_list_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "product_buy_list"
"""
type product_buy_list_aggregate_fields {
  avg: product_buy_list_avg_fields
  count(columns: [product_buy_list_select_column!], distinct: Boolean): Int!
  max: product_buy_list_max_fields
  min: product_buy_list_min_fields
  stddev: product_buy_list_stddev_fields
  stddev_pop: product_buy_list_stddev_pop_fields
  stddev_samp: product_buy_list_stddev_samp_fields
  sum: product_buy_list_sum_fields
  var_pop: product_buy_list_var_pop_fields
  var_samp: product_buy_list_var_samp_fields
  variance: product_buy_list_variance_fields
}

"""
order by aggregate values of table "product_buy_list"
"""
input product_buy_list_aggregate_order_by {
  avg: product_buy_list_avg_order_by
  count: order_by
  max: product_buy_list_max_order_by
  min: product_buy_list_min_order_by
  stddev: product_buy_list_stddev_order_by
  stddev_pop: product_buy_list_stddev_pop_order_by
  stddev_samp: product_buy_list_stddev_samp_order_by
  sum: product_buy_list_sum_order_by
  var_pop: product_buy_list_var_pop_order_by
  var_samp: product_buy_list_var_samp_order_by
  variance: product_buy_list_variance_order_by
}

"""
input type for inserting array relation for remote table "product_buy_list"
"""
input product_buy_list_arr_rel_insert_input {
  data: [product_buy_list_insert_input!]!

  """upsert condition"""
  on_conflict: product_buy_list_on_conflict
}

"""aggregate avg on columns"""
type product_buy_list_avg_fields {
  quantity: Float
}

"""
order by avg() on columns of table "product_buy_list"
"""
input product_buy_list_avg_order_by {
  quantity: order_by
}

"""
Boolean expression to filter rows from the table "product_buy_list". All fields are combined with a logical 'AND'.
"""
input product_buy_list_bool_exp {
  _and: [product_buy_list_bool_exp!]
  _not: product_buy_list_bool_exp
  _or: [product_buy_list_bool_exp!]
  bought: Boolean_comparison_exp
  buy_list: buy_list_bool_exp
  buy_list_uuid: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  price_uuid: uuid_comparison_exp
  product: product_bool_exp
  product_uuid: uuid_comparison_exp
  quantity: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "product_buy_list"
"""
enum product_buy_list_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  product_buy_list_pkey
}

"""
input type for incrementing numeric columns in table "product_buy_list"
"""
input product_buy_list_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "product_buy_list"
"""
input product_buy_list_insert_input {
  bought: Boolean
  buy_list: buy_list_obj_rel_insert_input
  buy_list_uuid: uuid
  created_at: timestamptz
  price_uuid: uuid
  product: product_obj_rel_insert_input
  product_uuid: uuid
  quantity: Int
  updated_at: timestamptz
  uuid: uuid
}

"""aggregate max on columns"""
type product_buy_list_max_fields {
  buy_list_uuid: uuid
  created_at: timestamptz
  price_uuid: uuid
  product_uuid: uuid
  quantity: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
order by max() on columns of table "product_buy_list"
"""
input product_buy_list_max_order_by {
  buy_list_uuid: order_by
  created_at: order_by
  price_uuid: order_by
  product_uuid: order_by
  quantity: order_by
  updated_at: order_by
  uuid: order_by
}

"""aggregate min on columns"""
type product_buy_list_min_fields {
  buy_list_uuid: uuid
  created_at: timestamptz
  price_uuid: uuid
  product_uuid: uuid
  quantity: Int
  updated_at: timestamptz
  uuid: uuid
}

"""
order by min() on columns of table "product_buy_list"
"""
input product_buy_list_min_order_by {
  buy_list_uuid: order_by
  created_at: order_by
  price_uuid: order_by
  product_uuid: order_by
  quantity: order_by
  updated_at: order_by
  uuid: order_by
}

"""
response of any mutation on the table "product_buy_list"
"""
type product_buy_list_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [product_buy_list!]!
}

"""
on_conflict condition type for table "product_buy_list"
"""
input product_buy_list_on_conflict {
  constraint: product_buy_list_constraint!
  update_columns: [product_buy_list_update_column!]! = []
  where: product_buy_list_bool_exp
}

"""Ordering options when selecting data from "product_buy_list"."""
input product_buy_list_order_by {
  bought: order_by
  buy_list: buy_list_order_by
  buy_list_uuid: order_by
  created_at: order_by
  price_uuid: order_by
  product: product_order_by
  product_uuid: order_by
  quantity: order_by
  updated_at: order_by
  uuid: order_by
}

"""primary key columns input for table: product_buy_list"""
input product_buy_list_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "product_buy_list"
"""
enum product_buy_list_select_column {
  """column name"""
  bought

  """column name"""
  buy_list_uuid

  """column name"""
  created_at

  """column name"""
  price_uuid

  """column name"""
  product_uuid

  """column name"""
  quantity

  """column name"""
  updated_at

  """column name"""
  uuid
}

"""
select "product_buy_list_aggregate_bool_exp_bool_and_arguments_columns" columns of table "product_buy_list"
"""
enum product_buy_list_select_column_product_buy_list_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  bought
}

"""
select "product_buy_list_aggregate_bool_exp_bool_or_arguments_columns" columns of table "product_buy_list"
"""
enum product_buy_list_select_column_product_buy_list_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  bought
}

"""
input type for updating data in table "product_buy_list"
"""
input product_buy_list_set_input {
  bought: Boolean
  price_uuid: uuid
  quantity: Int
}

"""aggregate stddev on columns"""
type product_buy_list_stddev_fields {
  quantity: Float
}

"""
order by stddev() on columns of table "product_buy_list"
"""
input product_buy_list_stddev_order_by {
  quantity: order_by
}

"""aggregate stddev_pop on columns"""
type product_buy_list_stddev_pop_fields {
  quantity: Float
}

"""
order by stddev_pop() on columns of table "product_buy_list"
"""
input product_buy_list_stddev_pop_order_by {
  quantity: order_by
}

"""aggregate stddev_samp on columns"""
type product_buy_list_stddev_samp_fields {
  quantity: Float
}

"""
order by stddev_samp() on columns of table "product_buy_list"
"""
input product_buy_list_stddev_samp_order_by {
  quantity: order_by
}

"""
Streaming cursor of the table "product_buy_list"
"""
input product_buy_list_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: product_buy_list_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input product_buy_list_stream_cursor_value_input {
  bought: Boolean
  buy_list_uuid: uuid
  created_at: timestamptz
  price_uuid: uuid
  product_uuid: uuid
  quantity: Int
  updated_at: timestamptz
  uuid: uuid
}

"""aggregate sum on columns"""
type product_buy_list_sum_fields {
  quantity: Int
}

"""
order by sum() on columns of table "product_buy_list"
"""
input product_buy_list_sum_order_by {
  quantity: order_by
}

"""
update columns of table "product_buy_list"
"""
enum product_buy_list_update_column {
  """column name"""
  bought

  """column name"""
  price_uuid

  """column name"""
  quantity
}

input product_buy_list_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: product_buy_list_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: product_buy_list_set_input
  where: product_buy_list_bool_exp!
}

"""aggregate var_pop on columns"""
type product_buy_list_var_pop_fields {
  quantity: Float
}

"""
order by var_pop() on columns of table "product_buy_list"
"""
input product_buy_list_var_pop_order_by {
  quantity: order_by
}

"""aggregate var_samp on columns"""
type product_buy_list_var_samp_fields {
  quantity: Float
}

"""
order by var_samp() on columns of table "product_buy_list"
"""
input product_buy_list_var_samp_order_by {
  quantity: order_by
}

"""aggregate variance on columns"""
type product_buy_list_variance_fields {
  quantity: Float
}

"""
order by variance() on columns of table "product_buy_list"
"""
input product_buy_list_variance_order_by {
  quantity: order_by
}

"""
unique or primary key constraints on table "product"
"""
enum product_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  product_pkey
}

"""
input type for incrementing numeric columns in table "product"
"""
input product_inc_input {
  weight: float8
}

"""
input type for inserting data into table "product"
"""
input product_insert_input {
  brand: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  name: String
  product_buy_lists: product_buy_list_arr_rel_insert_input
  updated_at: timestamptz
  uuid: uuid
  weight: float8
}

"""
response of any mutation on the table "product"
"""
type product_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [product!]!
}

"""
input type for inserting object relation for remote table "product"
"""
input product_obj_rel_insert_input {
  data: product_insert_input!

  """upsert condition"""
  on_conflict: product_on_conflict
}

"""
on_conflict condition type for table "product"
"""
input product_on_conflict {
  constraint: product_constraint!
  update_columns: [product_update_column!]! = []
  where: product_bool_exp
}

"""Ordering options when selecting data from "product"."""
input product_order_by {
  brand: order_by
  created_at: order_by
  created_by_user_uuid: order_by
  image_url: order_by
  name: order_by
  product_buy_lists_aggregate: product_buy_list_aggregate_order_by
  updated_at: order_by
  uuid: order_by
  weight: order_by
}

"""primary key columns input for table: product"""
input product_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "product"
"""
enum product_select_column {
  """column name"""
  brand

  """column name"""
  created_at

  """column name"""
  created_by_user_uuid

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  uuid

  """column name"""
  weight
}

"""
input type for updating data in table "product"
"""
input product_set_input {
  brand: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  name: String
  updated_at: timestamptz
  uuid: uuid
  weight: float8
}

"""
Streaming cursor of the table "product"
"""
input product_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: product_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input product_stream_cursor_value_input {
  brand: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  name: String
  updated_at: timestamptz
  uuid: uuid
  weight: float8
}

"""
update columns of table "product"
"""
enum product_update_column {
  """column name"""
  brand

  """column name"""
  created_at

  """column name"""
  created_by_user_uuid

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  uuid

  """column name"""
  weight
}

input product_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: product_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: product_set_input
  where: product_bool_exp!
}

type query_root {
  """
  fetch data from the table: "buy_list"
  """
  buy_list(
    """distinct select on columns"""
    distinct_on: [buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_list_order_by!]

    """filter the rows returned"""
    where: buy_list_bool_exp
  ): [buy_list!]!

  """
  fetch aggregated fields from the table: "buy_list"
  """
  buy_list_aggregate(
    """distinct select on columns"""
    distinct_on: [buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_list_order_by!]

    """filter the rows returned"""
    where: buy_list_bool_exp
  ): buy_list_aggregate!

  """fetch data from the table: "buy_list" using primary key columns"""
  buy_list_by_pk(uuid: uuid!): buy_list

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """
  fetch data from the table: "storage.files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch data from the table: "product_buy_list"
  """
  product_buy_list(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): [product_buy_list!]!

  """
  fetch aggregated fields from the table: "product_buy_list"
  """
  product_buy_list_aggregate(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): product_buy_list_aggregate!

  """
  fetch data from the table: "product_buy_list" using primary key columns
  """
  product_buy_list_by_pk(uuid: uuid!): product_buy_list

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(uuid: uuid!): product

  """
  fetch data from the table: "supermarket"
  """
  supermarket(
    """distinct select on columns"""
    distinct_on: [supermarket_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supermarket_order_by!]

    """filter the rows returned"""
    where: supermarket_bool_exp
  ): [supermarket!]!

  """fetch data from the table: "supermarket" using primary key columns"""
  supermarket_by_pk(uuid: uuid!): supermarket

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

type subscription_root {
  """
  fetch data from the table: "buy_list"
  """
  buy_list(
    """distinct select on columns"""
    distinct_on: [buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_list_order_by!]

    """filter the rows returned"""
    where: buy_list_bool_exp
  ): [buy_list!]!

  """
  fetch aggregated fields from the table: "buy_list"
  """
  buy_list_aggregate(
    """distinct select on columns"""
    distinct_on: [buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [buy_list_order_by!]

    """filter the rows returned"""
    where: buy_list_bool_exp
  ): buy_list_aggregate!

  """fetch data from the table: "buy_list" using primary key columns"""
  buy_list_by_pk(uuid: uuid!): buy_list

  """
  fetch data from the table in a streaming manner: "buy_list"
  """
  buy_list_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [buy_list_stream_cursor_input]!

    """filter the rows returned"""
    where: buy_list_bool_exp
  ): [buy_list!]!

  """fetch data from the table: "storage.files" using primary key columns"""
  file(id: uuid!): files

  """
  fetch data from the table: "storage.files"
  """
  files(
    """distinct select on columns"""
    distinct_on: [files_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [files_order_by!]

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table in a streaming manner: "storage.files"
  """
  files_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [files_stream_cursor_input]!

    """filter the rows returned"""
    where: files_bool_exp
  ): [files!]!

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch data from the table: "product_buy_list"
  """
  product_buy_list(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): [product_buy_list!]!

  """
  fetch aggregated fields from the table: "product_buy_list"
  """
  product_buy_list_aggregate(
    """distinct select on columns"""
    distinct_on: [product_buy_list_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_buy_list_order_by!]

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): product_buy_list_aggregate!

  """
  fetch data from the table: "product_buy_list" using primary key columns
  """
  product_buy_list_by_pk(uuid: uuid!): product_buy_list

  """
  fetch data from the table in a streaming manner: "product_buy_list"
  """
  product_buy_list_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [product_buy_list_stream_cursor_input]!

    """filter the rows returned"""
    where: product_buy_list_bool_exp
  ): [product_buy_list!]!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(uuid: uuid!): product

  """
  fetch data from the table in a streaming manner: "product"
  """
  product_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [product_stream_cursor_input]!

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """
  fetch data from the table: "supermarket"
  """
  supermarket(
    """distinct select on columns"""
    distinct_on: [supermarket_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [supermarket_order_by!]

    """filter the rows returned"""
    where: supermarket_bool_exp
  ): [supermarket!]!

  """fetch data from the table: "supermarket" using primary key columns"""
  supermarket_by_pk(uuid: uuid!): supermarket

  """
  fetch data from the table in a streaming manner: "supermarket"
  """
  supermarket_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [supermarket_stream_cursor_input]!

    """filter the rows returned"""
    where: supermarket_bool_exp
  ): [supermarket!]!

  """fetch data from the table: "auth.users" using primary key columns"""
  user(id: uuid!): users

  """
  fetch data from the table: "auth.users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch data from the table in a streaming manner: "auth.users"
  """
  users_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_stream_cursor_input]!

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!
}

"""
columns and relationships of "supermarket"
"""
type supermarket {
  address: String!
  created_at: timestamptz!
  created_by_user_uuid: uuid
  image_url: String!
  latitude: float8
  longitude: float8
  name: String!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
Boolean expression to filter rows from the table "supermarket". All fields are combined with a logical 'AND'.
"""
input supermarket_bool_exp {
  _and: [supermarket_bool_exp!]
  _not: supermarket_bool_exp
  _or: [supermarket_bool_exp!]
  address: String_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by_user_uuid: uuid_comparison_exp
  image_url: String_comparison_exp
  latitude: float8_comparison_exp
  longitude: float8_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "supermarket"
"""
enum supermarket_constraint {
  """
  unique or primary key constraint on columns "uuid"
  """
  supermarket_pkey
}

"""
input type for incrementing numeric columns in table "supermarket"
"""
input supermarket_inc_input {
  latitude: float8
  longitude: float8
}

"""
input type for inserting data into table "supermarket"
"""
input supermarket_insert_input {
  address: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  latitude: float8
  longitude: float8
  name: String
  updated_at: timestamptz
  uuid: uuid
}

"""
response of any mutation on the table "supermarket"
"""
type supermarket_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [supermarket!]!
}

"""
on_conflict condition type for table "supermarket"
"""
input supermarket_on_conflict {
  constraint: supermarket_constraint!
  update_columns: [supermarket_update_column!]! = []
  where: supermarket_bool_exp
}

"""Ordering options when selecting data from "supermarket"."""
input supermarket_order_by {
  address: order_by
  created_at: order_by
  created_by_user_uuid: order_by
  image_url: order_by
  latitude: order_by
  longitude: order_by
  name: order_by
  updated_at: order_by
  uuid: order_by
}

"""primary key columns input for table: supermarket"""
input supermarket_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "supermarket"
"""
enum supermarket_select_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  created_by_user_uuid

  """column name"""
  image_url

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  uuid
}

"""
input type for updating data in table "supermarket"
"""
input supermarket_set_input {
  address: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  latitude: float8
  longitude: float8
  name: String
  updated_at: timestamptz
  uuid: uuid
}

"""
Streaming cursor of the table "supermarket"
"""
input supermarket_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: supermarket_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input supermarket_stream_cursor_value_input {
  address: String
  created_at: timestamptz
  created_by_user_uuid: uuid
  image_url: String
  latitude: float8
  longitude: float8
  name: String
  updated_at: timestamptz
  uuid: uuid
}

"""
update columns of table "supermarket"
"""
enum supermarket_update_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  created_by_user_uuid

  """column name"""
  image_url

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  updated_at

  """column name"""
  uuid
}

input supermarket_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: supermarket_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: supermarket_set_input
  where: supermarket_bool_exp!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
User account information. Don't modify its structure as Hasura Auth relies on it to function properly.
"""
type users {
  avatarUrl: String!
  createdAt: timestamptz!
  displayName: String!
  email: citext
  emailVerified: Boolean!
  id: uuid!
  lastSeen: timestamptz
  updatedAt: timestamptz!
}

"""
Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  avatarUrl: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  displayName: String_comparison_exp
  email: citext_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  lastSeen: timestamptz_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"""
response of any mutation on the table "auth.users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""Ordering options when selecting data from "auth.users"."""
input users_order_by {
  avatarUrl: order_by
  createdAt: order_by
  displayName: order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  lastSeen: order_by
  updatedAt: order_by
}

"""primary key columns input for table: auth.users"""
input users_pk_columns_input {
  id: uuid!
}

"""
select columns of table "auth.users"
"""
enum users_select_column {
  """column name"""
  avatarUrl

  """column name"""
  createdAt

  """column name"""
  displayName

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  lastSeen

  """column name"""
  updatedAt
}

"""
input type for updating data in table "auth.users"
"""
input users_set_input {
  avatarUrl: String
  displayName: String
}

"""
Streaming cursor of the table "users"
"""
input users_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: users_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input users_stream_cursor_value_input {
  avatarUrl: String
  createdAt: timestamptz
  displayName: String
  email: citext
  emailVerified: Boolean
  id: uuid
  lastSeen: timestamptz
  updatedAt: timestamptz
}

input users_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input
  where: users_bool_exp!
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

